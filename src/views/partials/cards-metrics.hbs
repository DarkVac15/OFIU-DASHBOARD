<div class="row">
    {{#each metrics}}
    <div class="col-md-4 mb-4">
        <div class="card text-white bg-dark">
            <div class="card-body">
                <h5 class="card-title">{{this.title_card}}</h5>

                {{#if this.isHtml}}
                <!-- Renderiza HTML sin escapar -->
                <p class="card-text">{{{this.value}}}</p>
                {{else}}
                <!-- Renderiza el valor como texto normal -->
                <p class="card-text">{{this.value}}</p>
                {{/if}}

                <p class="card-text"><small>{{this.description}}</small></p>
            </div>
        </div>
    </div>
    {{/each}}
</div>

<div class="row">
    <div class="col-md-4 text-white bg-dark">
        <h2>Cantidad de Tickets por Estado</h2>
        <canvas id="barChart" width="400" height="200"></canvas>
    </div>

    <div class="col-md-4 text-white bg-dark">
        <h2>Cantidad de Tickets por Etiqueta</h2>
        <canvas id="categoryChart" width="400" height="200"></canvas>
    </div>

    <div class="col-md-4 text-white bg-dark">
        <h2>Subcategorías de Profesionales</h2>
        <canvas id="subcategoryChart" width="400" height="200"></canvas>
    </div>
     <div class="col-md-4 text-white bg-dark">
       <h2>Cantidad de Profesionales por Ciudad</h2>
        <canvas id="cityChart" width="400" height="200"></canvas>
    </div>
</div>


<script>
      // Gráfico de Barras para la Ciudad
    const ctxCity = document.getElementById('cityChart').getContext('2d');
    const cityChart = new Chart(ctxCity, {
        type: 'bar',
        data: {
            labels: JSON.parse('{{{cityChartLabels}}}'), // Etiquetas
            datasets: [{
                label: 'Cantidad de Profesionales',
                data: JSON.parse('{{{cityChartData}}}'), // Datos
                backgroundColor: 'rgba(153, 102, 255, 0.6)',
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    // Gráfico de Barras
    const ctxBar = document.getElementById('barChart').getContext('2d');
    const barChart = new Chart(ctxBar, {
        type: 'bar',
        data: {
            labels: {{{ barChartLabels }}},  // Sin JSON.parse
    datasets: [{
        label: 'Cantidad de Tickets',
        data: {{{ barChartData }}},      // Sin JSON.parse
        backgroundColor: 'rgba(75, 192, 192, 0.6)',
            }]
        },
    options: {
        scales: {
            y: {
                beginAtZero: true
            }
        }
    }
    });


    const categoryLabels = {{{ categoryChartLabels }}};
    const categoryData = {{{ categoryChartData }}};

    // Configurar el gráfico de barras de categorías
    const ctxCategory = document.getElementById('categoryChart').getContext('2d');
    const categoryChart = new Chart(ctxCategory, {
        type: 'bar', // Tipo de gráfico de barras
        data: {
            labels: categoryLabels, // Nombres de las categorías
            datasets: [{
                label: 'Categorías más solicitadas',
                data: categoryData, // Conteo de cada categoría
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true // El eje Y comienza desde 0
                }
            }
        }
    });


  // Gráfico de Subcategorías de Profesionales
    const ctxSubcategory = document.getElementById('subcategoryChart').getContext('2d');
    const subcategoryChart = new Chart(ctxSubcategory, {
        type: 'bar',
        data: {
            labels: {{{subcategoryChartLabels}}}, // Etiquetas de subcategorías
            datasets: [{
                label: 'Cantidad de Profesionales',
                data: {{{subcategoryChartData}}}, // Datos de subcategorías
                backgroundColor: 'rgba(153, 102, 255, 0.6)', // Color de las barras
                borderColor: 'rgba(153, 102, 255, 1)',       // Color del borde
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true // Asegura que el eje Y comience en 0
                }
            }
        }
    });

</script>