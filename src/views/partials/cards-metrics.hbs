<!-- Modal -->
<div class="modal fade" id="generalModal" tabindex="-1" aria-labelledby="generalModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl"> <!-- Usar modal-xl para un modal extra grande -->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="generalModalLabel">Detalles</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalBodyContent">
                <div class="table-responsive"> <!-- Hacer la tabla desplazable -->
                    <table class="table">
                        <!-- Contenido de la tabla -->
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>


<div class="row justify-content-center">
    {{#each metrics}}
    <div class="col-md-4 mb-4">
        <div class="card text-white bg-dark" data-type="{{this.type}}" id="card-{{this.type}}">
            <div class="card-body">
                <h5 class="card-title">{{this.title_card}}</h5>

                {{#if this.isHtml}}
                <!-- Renderiza HTML sin escapar -->
                <p class="card-text">{{{this.value}}}</p>
                {{else}}
                <!-- Renderiza el valor como texto normal -->
                <p class="card-text">{{this.value}}</p>
                {{/if}}

                <p class="card-text"><small>{{this.description}}</small></p>
            </div>
        </div>
    </div>
    {{/each}}
</div>

<div class="row justify-content-center"> <!-- Centrar la fila -->
    <div class="col-md-4 text-white bg-dark p-3 text-center"> <!-- Añadir padding y centrar texto -->
        <h2>Estado de los tickets</h2>
        <canvas id="barChart" width="400" height="200"></canvas>
    </div>
    <div class="col-md-4 text-white bg-dark p-3 text-center"> <!-- Añadir padding y centrar texto -->
        <h2>Profesionales por Ciudad</h2>
        <canvas id="cityChart" width="400" height="200"></canvas>
    </div>
</div>
<div class="row justify-content-center mt-4"> <!-- Centrar la fila y añadir margen superior -->
    <div class="col-md-4 text-white bg-dark p-3 text-center"> <!-- Añadir padding y centrar texto -->
        <h2>Distribución de Tickets por etiquetas</h2>
        <canvas id="categoryChart" width="400" height="200"></canvas>
    </div>
    <div class="col-md-4 text-white bg-dark p-3 text-center"> <!-- Añadir padding y centrar texto -->
        <h2>Distribución de Profesionales por etiquetas</h2>
        <canvas id="professionalsPieChart" width="400" height="200"></canvas>
    </div>
</div>

<div class="row">
    <h2 class="text-white"> Graficas de lineas </h2>
    <div class="col-md-4 text-white bg-dark">
        <h3> Registro de usuarios</h3>
        <canvas id="userTrendChart" width="400" height="200"></canvas>
    </div>
    <div class="col-md-4 text-white bg-dark">
        <h3>Registro de Profesionales</h3>
        <canvas id="professionalTrendChart" width="400" height="200"></canvas>
    </div>
    <div class="col-md-4 text-white bg-dark">
        <h3>Creacion de tickets</h3>
        <canvas id="ticketTrendChart" width="400" height="200"></canvas>
    </div>
</div>


<div class="row">
    <h2 class="text-white"> Mapa de calor de ticktes abiertos </h2>

    <div id="map"></div>
    <div id="ticketCounts" class="text-white mt-3">
        <p><strong>Tickets por Ciudad:</strong></p>
        <ul id="ticketCountList">
            <!-- Los datos de las ciudades y los tickets se agregarán aquí mediante JavaScript -->
        </ul>
    </div>

</div>


<style>
    #map {
        width: 100%;
        height: 300px;
        /* Ajusta la altura según tus necesidades */
    }
</style>


<script>
    const dataUser = JSON.parse('{{{dataUser}}}') || [];
    const dataProf = JSON.parse('{{{dataProf}}}') || [];
    const userBloq = JSON.parse('{{{userBloq}}}') || [];
    const dataticket = JSON.parse('{{{dataticket}}}') || [];

  
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".card").forEach(card => {
            card.addEventListener("click", function () {
                const type = this.getAttribute("data-type"); // Obtiene el tipo de tarjeta
                if (type) {

                    showData(type); // Llama a la función para mostrar los datos
                }
            });
        });
    });

    function showData(type) {
        let data = [];
        let tableHeaders = "";

        // Seleccionamos el array de datos correspondiente
        switch (type) {
            case "users":
                data = dataUser;
                tableHeaders = "<th>Nombre</th><th>Email</th><th>Fecha de registro</th>";
                break;
            case "professionals":
                data = dataProf;
                tableHeaders = "<th>Nombre</th><th>Email</th><th>Ciudad</th><th>Celular</th><th>Habilidades</th><th>Fecha de registro</th>";
                break;
            case "disabled-users":
                data = userBloq;
                tableHeaders = "<th>Nombre</th><th>Email</th>";
                break;
            case "tickets":
                data = dataticket;
                tableHeaders = "<th>Título</th><th>Fecha de creación</th><th>Estado</th><th>Ciudad de trabajo</th><th>Etiquetas</th>";
                break;
            default:
                data = [];
        }

        let tableContent = `
        <table class="table table-striped">
            <thead>
                <tr>${tableHeaders}</tr>
            </thead>
            <tbody>
    `;

        data.forEach(item => {
            tableContent += "<tr>";
            if (type === "users") {
                tableContent += `<td>${item.name}</td><td>${item.email}</td><td>${item.createdAt}</td>`;
            } else if (type === "professionals") {
                tableContent += `<td>${item.name}</td><td>${item.email}</td><td>${item.city || 'N/A'}</td><td>${item.phone}</td><td>${item.skills}</td><td>${item.createdAt}</td>`;
            } else if (type === "disabled-users") {
                tableContent += `<td>${item.name}</td><td>${item.email}</td>`;
            } else if (type === "tickets") {
                tableContent += `<td>${item.title}</td><td>${item.createdAt}</td><td>${item.state}</td><td>${item.cityTicket}</td><td>${item.tags}</td>`;
            }
            tableContent += "</tr>";
        });

        tableContent += "</tbody></table>";

        // Insertamos la tabla en el modal
        document.getElementById("modalBodyContent").innerHTML = tableContent;

        // Mostramos el modal
        let modal = new bootstrap.Modal(document.getElementById("generalModal"));
        modal.show();
    }





    // Recupera los datos enviados desde el backend
    // Configuración del gráfico de pastel
    const ctxpastel = document.getElementById('professionalsPieChart').getContext('2d');
    new Chart(ctxpastel, {
        type: 'pie',
        data: {
            // Las categorías como etiquetas
            labels: JSON.parse('{{{labelCategoryProf}}}'),
            datasets: [{
                //  data: counts, // Los valores correspondientes
                data: JSON.parse('{{{valueProf}}}'),
                backgroundColor: [
                    '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
                    '#FF9F40', '#E7E9ED', '#FFC0CB', '#00FA9A', '#FFD700'
                ], // Colores de cada porción
                borderColor: '#ffffff',
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'right'
                },
                tooltip: {
                    callbacks: {
                        label: function (tooltipItem) {
                            const label = tooltipItem.label || '';
                            const value = tooltipItem.raw;
                            return `${label}: ${value} profesionales`;
                        }
                    }
                }
            }
        }
    });


    // Coordenadas de las ciudades
    const citiesCoordinates = {
        "Espinal": { lat: 4.14924, lng: -74.88429 },
        "Girardot": { lat: 4.30079, lng: -74.80754 },
        "Guamo": { lat: 4.03078, lng: -74.9701 },
        "Flandes": { lat: 4.29005, lng: -74.81612 }
    };

    // Ubicaciones de los trabajos (ciudades) y el número de trabajos en cada ciudad
    const locationData = {{{ locationChartLabels }}}; // Por ejemplo: ["El Espinal", "Ibagué", "Melgar"]
    const locationValues = {{{ locationChartData }}}; // Ejemplo: [10, 20, 15] (Número de trabajos por ciudad)

    // Crear el mapa de Leaflet, centrado en una ciudad por defecto (por ejemplo, El Espinal)
    // Crear el mapa de Leaflet, centrado en una ciudad por defecto (por ejemplo, El Espinal)
    const map = L.map('map').setView([4.22305, -74.83435], 11);

    // Añadir capa de OpenStreetMap al mapa
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    // Asegúrate de que el mapa se ajusta a su contenedor después de cargar
    map.on('load', function () {
        map.invalidateSize();
    });

    // Agregar los círculos (burbujas) a cada ciudad en el mapa
    locationData.forEach((city, index) => {
        // Obtener las coordenadas de la ciudad usando el objeto `citiesCoordinates`
        const { lat, lng } = citiesCoordinates[city];
        const ticketCount = locationValues[index]; // Número de tickets en esa ciudad
        const circleSize = ticketCount * 2;
        // Crear un círculo (burbuja) para representar el número de tickets en la ciudad
        L.circleMarker([lat, lng], {
            radius: circleSize,  // Tamaño del círculo basado en el número de tickets
            color: 'blue',  // Color del borde del círculo
            fillColor: 'blue',  // Color de relleno
            fillOpacity: 0.6  // Opacidad del relleno
        }).addTo(map)
            .bindPopup(`${city}: ${ticketCount} Tickets`); // Mostrar el número de tickets en un popup al hacer clic
    });

    // Iterar sobre las ciudades y agregar cada una a la lista de tickets
    const ticketCountList = document.getElementById('ticketCountList');
    locationData.forEach((city, index) => {
        const listItem = document.createElement('li');
        listItem.textContent = `${city}: ${locationValues[index]} Tickets`;
        ticketCountList.appendChild(listItem);
    });





    // Obtén el contexto del canvas
    const ctx = document.getElementById('ticketTrendChart').getContext('2d');

    // Crear el gráfico de línea
    const ticketTrendChart = new Chart(ctx, {
        type: 'line',  // Tipo de gráfico: línea
        data: {
            labels: JSON.parse('{{{ticketTrendLabels}}}'),  // Etiquetas para el eje X (fechas de tickets)
            datasets: [{
                label: 'Tickets Creados',
                data: JSON.parse('{{{ticketTrendData}}}'),  // Datos para el eje Y (cantidad de tickets)
                fill: false,  // No llenar el área bajo la línea
                borderColor: 'rgba(54, 162, 235, 1)',  // Color de la línea
                tension: 0.1,  // Suavizar la curva de la línea
            }]
        },
        options: {
            responsive: true,  // Ajuste responsivo
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Fecha'  // Título del eje X
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Número de Tickets'  // Título del eje Y
                    }
                }
            }
        }
    });



    const ctxProfessionalTrend = document.getElementById('professionalTrendChart').getContext('2d');
    const professionalTrendChart = new Chart(ctxProfessionalTrend, {
        type: 'line',
        data: {
            labels: JSON.parse('{{{professionalTrendLabels}}}'),
            datasets: [{
                label: 'Profesionales Registrados',
                data: JSON.parse('{{{professionalTrendData}}}'),
                borderColor: 'rgba(54, 162, 235, 1)', // Color azul para el borde
                backgroundColor: 'rgba(54, 162, 235, 0.2)', // Fondo azul claro
                fill: true,
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Fecha'
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Número de Profesionales'
                    },
                    beginAtZero: true
                }
            }
        }
    });






    const ctxUserTrend = document.getElementById('userTrendChart').getContext('2d');
    const userTrendChart = new Chart(ctxUserTrend, {
        type: 'line',
        data: {
            labels: {{{ userTrendLabels }}},
    datasets: [{
        label: 'Usuarios Registrados',
        data: {{{ userTrendData }}},
        borderColor: 'rgba(75, 192, 192, 1)',
        backgroundColor: 'rgba(75, 192, 192, 0.2)',
        fill: true,
        borderWidth: 2
            }]
        },
    options: {
        responsive: true,
            scales: {
            x: {
                title: {
                    display: true,
                        text: 'Fecha'
                }
            },
            y: {
                title: {
                    display: true,
                        text: 'Número de Usuarios'
                },
                beginAtZero: true // Para que el gráfico comience en cero
            }
        }
    }
    });
    // Gráfico de Barras para la Ciudad
    const ctxCity = document.getElementById('cityChart').getContext('2d');
    const cityChart = new Chart(ctxCity, {
        type: 'bar',
        data: {
            labels: JSON.parse('{{{cityChartLabels}}}'), // Etiquetas
            datasets: [{
                label: 'Cantidad de Profesionales',
                data: JSON.parse('{{{cityChartData}}}'), // Datos
                backgroundColor: 'rgba(153, 102, 255, 0.6)',
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    // Gráfico de Barras etiquetas pro tikcet
    const ctxBar = document.getElementById('barChart').getContext('2d');
    const barChart = new Chart(ctxBar, {
        type: 'bar',
        data: {
            labels: JSON.parse('{{{ barChartLabels }}}'),  // Convertir a JSON
            datasets: [{
                label: 'Cantidad de Tickets',
                data: JSON.parse('{{{ barChartData }}}'),  // Convertir a JSON
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    const categoryLabels = JSON.parse('{{{ categoryChartLabels }}}');
    const categoryData = JSON.parse('{{{ categoryChartData }}}');
    // Configurar el gráfico de barras de categorías

    const ctxCategory = document.getElementById('categoryChart').getContext('2d');
    const categoryChart = new Chart(ctxCategory, {
        type: 'pie', // Tipo de gráfico de pastel
        data: {
            labels: categoryLabels, // Nombres de las categorías
            datasets: [{
                label: 'Categorías más solicitadas',
                data: categoryData, // Conteo de cada categoría
                backgroundColor: [
                    'rgba(255, 99, 132, 0.6)', // Rojo
                    'rgba(54, 162, 235, 0.6)', // Azul
                    'rgba(255, 206, 86, 0.6)', // Amarillo
                    'rgba(75, 192, 192, 0.6)', // Verde
                    'rgba(153, 102, 255, 0.6)', // Morado
                    'rgba(255, 159, 64, 0.6)', // Naranja
                    'rgba(199, 199, 199, 0.6)'  // Gris
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(199, 199, 199, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true, // Hace que el gráfico sea responsive
            plugins: {
                legend: {
                    position: 'right', // Posición de la leyenda
                },
                tooltip: {
                    enabled: true, // Habilita los tooltips
                }
            }
        }
    });

</script>