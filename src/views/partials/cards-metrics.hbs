<div class="row">
    {{#each metrics}}
    <div class="col-md-4 mb-4">
        <div class="card text-white bg-dark">
            <div class="card-body">
                <h5 class="card-title">{{this.title_card}}</h5>

                {{#if this.isHtml}}
                <!-- Renderiza HTML sin escapar -->
                <p class="card-text">{{{this.value}}}</p>
                {{else}}
                <!-- Renderiza el valor como texto normal -->
                <p class="card-text">{{this.value}}</p>
                {{/if}}

                <p class="card-text"><small>{{this.description}}</small></p>
            </div>
        </div>
    </div>
    {{/each}}
</div>

<div class="row">
    <div class="col-md-4 text-white bg-dark">
        <h2> Estado de los tickets </h2>
        <canvas id="barChart" width="400" height="200"></canvas>
    </div>

    <div class="col-md-4 text-white bg-dark">
        <h2> Tickets por Etiqueta</h2>
        <canvas id="categoryChart" width="400" height="200"></canvas>
    </div>
    <div class="col-md-4 text-white bg-dark">
        <h2> Profesionales por Ciudad</h2>
        <canvas id="cityChart" width="400" height="200"></canvas>
    </div>

</div>

<div class="row">
 <h2 class="text-white"> Graficas de lineas </h2>
    <div class="col-md-4 text-white bg-dark">
        <h3>  Registro de usuarios</h3>
        <canvas id="userTrendChart" width="400" height="200"></canvas>
    </div>
    <div class="col-md-4 text-white bg-dark">
        <h3>Registro de Profesionales</h3>
        <canvas id="professionalTrendChart" width="400" height="200"></canvas>
    </div>
    <div class="col-md-4 text-white bg-dark">
        <h3>Creacion de tickets</h3>
        <canvas id="ticketTrendChart" width="400" height="200"></canvas>
    </div>
</div>


<script>
 // Obtén el contexto del canvas
    const ctx = document.getElementById('ticketTrendChart').getContext('2d');

    // Crear el gráfico de línea
    const ticketTrendChart = new Chart(ctx, {
        type: 'line',  // Tipo de gráfico: línea
        data: {
            labels: JSON.parse('{{{ticketTrendLabels}}}'),  // Etiquetas para el eje X (fechas de tickets)
            datasets: [{
                label: 'Tickets Creados',
                data: JSON.parse('{{{ticketTrendData}}}'),  // Datos para el eje Y (cantidad de tickets)
                fill: false,  // No llenar el área bajo la línea
                borderColor: 'rgba(54, 162, 235, 1)',  // Color de la línea
                tension: 0.1,  // Suavizar la curva de la línea
            }]
        },
        options: {
            responsive: true,  // Ajuste responsivo
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Fecha'  // Título del eje X
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Número de Tickets'  // Título del eje Y
                    }
                }
            }
        }
    });



const ctxProfessionalTrend = document.getElementById('professionalTrendChart').getContext('2d');
    const professionalTrendChart = new Chart(ctxProfessionalTrend, {
        type: 'line',
        data: {
            labels: JSON.parse('{{{professionalTrendLabels}}}'),
            datasets: [{
                label: 'Profesionales Registrados',
                data: JSON.parse('{{{professionalTrendData}}}'),
                borderColor: 'rgba(54, 162, 235, 1)', // Color azul para el borde
                backgroundColor: 'rgba(54, 162, 235, 0.2)', // Fondo azul claro
                fill: true,
                borderWidth: 2
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Fecha'
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Número de Profesionales'
                    },
                    beginAtZero: true
                }
            }
        }
    });






    const ctxUserTrend = document.getElementById('userTrendChart').getContext('2d');
    const userTrendChart = new Chart(ctxUserTrend, {
        type: 'line',
        data: {
            labels: {{{ userTrendLabels }}},
    datasets: [{
        label: 'Usuarios Registrados',
        data: {{{ userTrendData }}},
        borderColor: 'rgba(75, 192, 192, 1)',
        backgroundColor: 'rgba(75, 192, 192, 0.2)',
        fill: true,
        borderWidth: 2
            }]
        },
    options: {
        responsive: true,
            scales: {
            x: {
                title: {
                    display: true,
                        text: 'Fecha'
                }
            },
            y: {
                title: {
                    display: true,
                        text: 'Número de Usuarios'
                },
                beginAtZero: true // Para que el gráfico comience en cero
            }
        }
    }
    });




    // Gráfico de Barras para la Ciudad
    const ctxCity = document.getElementById('cityChart').getContext('2d');
    const cityChart = new Chart(ctxCity, {
        type: 'bar',
        data: {
            labels: JSON.parse('{{{cityChartLabels}}}'), // Etiquetas
            datasets: [{
                label: 'Cantidad de Profesionales',
                data: JSON.parse('{{{cityChartData}}}'), // Datos
                backgroundColor: 'rgba(153, 102, 255, 0.6)',
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    // Gráfico de Barras
    const ctxBar = document.getElementById('barChart').getContext('2d');
    const barChart = new Chart(ctxBar, {
        type: 'bar',
        data: {
            labels: JSON.parse('{{{ barChartLabels }}}'),  // Convertir a JSON
            datasets: [{
                label: 'Cantidad de Tickets',
                data: JSON.parse('{{{ barChartData }}}'),  // Convertir a JSON
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    const categoryLabels = JSON.parse('{{{ categoryChartLabels }}}');
    const categoryData = JSON.parse('{{{ categoryChartData }}}');
    // Configurar el gráfico de barras de categorías
    const ctxCategory = document.getElementById('categoryChart').getContext('2d');
    const categoryChart = new Chart(ctxCategory, {
        type: 'bar', // Tipo de gráfico de barras
        data: {
            labels: categoryLabels, // Nombres de las categorías
            datasets: [{
                label: 'Categorías más solicitadas',
                data: categoryData, // Conteo de cada categoría
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true // El eje Y comienza desde 0
                }
            }
        }
    });
    // Gráfico de Subcategorías de Profesionales
    const ctxSubcategory = document.getElementById('subcategoryChart').getContext('2d');
    const subcategoryChart = new Chart(ctxSubcategory, {
        type: 'bar',
        data: {
            labels: JSON.parse('{{{ subcategoryChartLabels }}}'),  // Convertir a JSON
            datasets: [{
                label: 'Cantidad de Profesionales',
                data: JSON.parse('{{{ subcategoryChartData }}}'),  // Convertir a JSON
                backgroundColor: 'rgba(153, 102, 255, 0.6)', // Color de las barras
                borderColor: 'rgba(153, 102, 255, 1)',       // Color del borde
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true // Asegura que el eje Y comience en 0
                }
            }
        }
    });
</script>